1.	생년별 인원수, SALARY 평균, 최고 SALARY, 최저 SALARY, SALARY 총합, 분산, 표준편차

SELECT TO_CHAR(BIRTH_DATE,'YYYY'), COUNT(TO_CHAR(BIRTH_DATE,'YYYY')), AVG(SALARY), MIN(SALARY), SUM(SALARY), VARIANCE(SALARY), ROUND(STDDEV(SALARY),1)
FROM TEMP
GROUP BY TO_CHAR(BIRTH_DATE,'YYYY');

2.	1번의 결과 중 SALARY 평균이 5천만원 이상이 건만 조회하기

SELECT TO_CHAR(BIRTH_DATE,'YYYY'), COUNT(TO_CHAR(BIRTH_DATE,'YYYY')), AVG(SALARY), MIN(SALARY), SUM(SALARY), VARIANCE(SALARY), ROUND(STDDEV(SALARY),1)
FROM TEMP
GROUP BY TO_CHAR(BIRTH_DATE,'YYYY')
HAVING AVG(SALARY) >50000000;

3.	생년별 인원수, SALARY 평균, SALARY 총합/인원수 ? 결과관찰  마지막 두 컬럼이 같은지

SELECT TO_CHAR(BIRTH_DATE,'YYYY'), COUNT(TO_CHAR(BIRTH_DATE,'YYYY')), ROUND(AVG(SALARY),1),  ROUND(SUM(SALARY)/COUNT(TO_CHAR(BIRTH_DATE,'YYYY')),1)
FROM TEMP
GROUP BY TO_CHAR(BIRTH_DATE,'YYYY')
HAVING AVG(SALARY) >50000000;

4.   UPDATE TEMP
     SET      SALARY = NULL
     WHERE EMP_NAME = '홍길동';
5.   3번 다시 실행 후 결과 관찰
6.     ROLLBACK;
7. 생년,취미 별 GROUP BY 적용해 인원수, 평균 SALARY 가져오기

SELECT TO_CHAR(BIRTH_DATE,'YYYY'), COUNT(BIRTH_DATE), AVG(SALARY)
FROM TEMP
GROUP BY TO_CHAR(BIRTH_DATE,'YYYY')
HAVING TO_CHAR(BIRTH_DATE,'YYYY') IS NOT NULL;


SELECT HOBBY, COUNT(HOBBY), AVG(SALARY)
FROM TEMP
GROUP BY HOBBY
HAVING HOBBY IS NOT NULL;

8. HOBBY별 평균 SALARY

SELECT HOBBY,COUNT(HOBBY),
ROUND(AVG(SALARY),1)
FROM TEMP
GROUP BY HOBBY
HAVING HOBBY IS NOT NULL;

9. 8번 평균 SALARY의 최소 값









10. 특정 사번 P_EMP_ID, 조회조건 P_CONDITION  두 매개변수를 받아 
   P_CONDITION  이 1 이면 해당 사번이 속한 부서의 평균 급여를 리턴해주고
   P_CONDITION  이 2 이면 해당 사번과 같은 직급의 급여 평균을 리턴해주는 함수 AVG_BY_CASE 작성 

CREATE OR REPLACE FUNCTION SEARCH1(P_EMP_ID NUMBER, P_CONDITION NUMBER) RETURN NUMBER IS
P_LEV VARCHAR2(10); -- 직급 연봉 평균을 구하기 위한 변수 지정 
P_DEPT_CODE VARCHAR2(10); -- 부서 연봉 평균을 구하기 위한 변수 지정
P_SAL TEMP.SALARY%TYPE; --변수 테이블명.컬럼%TYPE : 해당 테이블의 컬럼과 같은 유형

BEGIN
     --주어진 매개변수를 부서연봉, 직급 연봉 변수에 대입
    SELECT DEPT_CODE, LEV -- SELECT N개 선택시
    INTO P_DEPT_CODE, P_LEV --변수도 N개 들어와야된다.
    FROM TEMP
    WHERE EMP_ID = P_EMP_ID;
 --주어진 매개변수가 P_DEPT_SAL,P_LEV_SAL에 대입됨 
 --주어진 매개변수(P_EMP_ID값을 EMP_ID 컬럼에서 찾아서 해당 ROW의 컬럼값(DEPT_CODE, LEV)에서 조회하여 P_DEPT_CODE, P_LEV 변수에 각각 넣는다
 --P_DEPT_SAL 은 DEPT_CODE 컬럼에서, P_LEV_SAL 은 LEV 컬럼값을 가져온다
 
 
 
     
--매개변수로 주어진 CONDITION 의 경우가1,2인 경우
    SELECT AVG(SALARY) -- SELECT 에 컬럼이 올 필요 없음 애초에 평균의 조건값을 여기에 적어준다.
    INTO P_SAL
    FROM TEMP
    WHERE DECODE(P_CONDITION,1,P_DEPT_CODE,2,P_LEV)=DECODE(P_CONDITION,1,DEPT_CODE,2,LEV);
    
-- WHERE은 연산자가 와야된다.
-- IF OR 연산자가 올때
-- P_CONDITION 이 1 인 경우 P_DEPT_CODE가 출력, 2인 경우 P_LEV를 출력) = P_CONDITION 이 1 인 경우 DEPT_CODE컬럼에서 같은 값으로 치부
-- 2인 경우 LEV 컬럼에서 같은 값으로 치부한다
-- 즉 P_DEPT_CODE = DEPT_CODE, P_LEV = LEV 라는 조건을 걸어주는거임 아래 주석문 참고
    
    
 
-- SELECT AVG(SALARY)
-- INTO P_SAL
-- FROM TEMP
-- WHERE DEPT_CODE = P_DEPT_CODE;
    
-- SELECT AVG(SALARY)
-- INTO P_SAL
-- FROM TEMP
-- WHERE LEV = P_LEV;
    




RETURN --값을 RETURN P_SAL 을 리턴
    
P_SAL;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
    RETURN -1;
    WHEN OTHERS THEN
    RAISE;
END;





11. 10번을 검증할 수 있는 SQL 작성 후 검증

SELECT SEARCH1(20050404,1) FROM DUAL;
SELECT SEARCH1(20050404,2) FROM DUAL;

12. 생년별 최고 SALARY, MAX(ID) 를 읽어 오기 
SELECT TO_CHAR(BIRTH_DATE,'YYYY'),         
        MAX(SALARY+(EMP_ID/100000000)) MAXX,
        SUBSTR(MAX(SALARY+(EMP_ID/100000000)),-8) MAXX_ID,
        SUBSTR(MAX(SALARY+(EMP_ID/100000000)),1,8) MAXX_SAL
        FROM TEMP
         GROUP BY TO_CHAR(BIRTH_DATE,'YYYY'
        HAVING SUBSTR(MAX(SALARY+(EMP_ID/100000000)),10) > 0;

13. 12번 결과가 테이블에서 같은 레코드인지 아닌지 CHECK하기


14  12번 뒤에 SALARY와 EMP_ID 연결해서 MAX값 구하기 

SELECT TO_CHAR(BIRTH_DATE,'YYYY'),         
        MAX(SALARY+(EMP_ID/100000000)) MAXX,
        SUBSTR(MAX(SALARY+(EMP_ID/100000000)),-8) MAXX_ID,
        SUBSTR(MAX(SALARY+(EMP_ID/100000000)),1,8) MAXX_SAL,
        TO_CHAR('사번'||':'||SUBSTR(MAX(SALARY+(EMP_ID/100000000)),-8)) || '연봉'||':'||SUBSTR(MAX(SALARY+(EMP_ID/100000000)),1,8) MAXXX
        FROM TEMP
        
        GROUP BY TO_CHAR(BIRTH_DATE,'YYYY')
        
        HAVING SUBSTR(MAX(SALARY+(EMP_ID/100000000)),10) > 0;




15. 생년별 최고 SALARY ID, 최고금액, 최저SALARY ID, 최저금액 가져오기
   (SUB QUERY 없이 INLINE VIEW를 사용하되 TEMP TABLE ACCESS는 한 번만 가능)

SELECT TO_CHAR(BIRTH_DATE,'YYYY'),         
       
        SUBSTR(MAX(SALARY+(EMP_ID/100000000)),-8) MAXX_ID,
        SUBSTR(MAX(SALARY+(EMP_ID/100000000)),0,8) MAXX_SAL,
       
        SUBSTR(MIN(SALARY+(EMP_ID/1000000000)),-8) MINN_ID,
        SUBSTR(MIN(SALARY+(EMP_ID/100000000)),0,8) MINN_SAL
        
        FROM TEMP
        GROUP BY TO_CHAR(BIRTH_DATE,'YYYY')
        HAVING SUBSTR(MAX(SALARY+(EMP_ID/100000000)),8) > 0;

